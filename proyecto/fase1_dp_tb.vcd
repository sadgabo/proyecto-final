$date
	Fri Nov 19 14:02:28 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module fase1_dp_tb $end
$var reg 1 ! clk $end
$scope module duv $end
$var wire 1 " c_and $end
$var wire 1 ! inclk $end
$var wire 1 # c_zflag $end
$var wire 32 $ c_sum [31:0] $end
$var wire 3 % c_so [2:0] $end
$var wire 1 & c_select $end
$var wire 32 ' c_result [31:0] $end
$var wire 1 ( c_regdst $end
$var wire 32 ) c_mux4 [31:0] $end
$var wire 32 * c_mux3 [31:0] $end
$var wire 5 + c_mux2 [4:0] $end
$var wire 32 , c_mux1 [31:0] $end
$var wire 1 - c_memwrite $end
$var wire 1 . c_memreads $end
$var wire 32 / c_instruc [31:0] $end
$var wire 32 0 c_inou [31:0] $end
$var wire 1 1 c_enesc $end
$var wire 32 2 c_datolec2 [31:0] $end
$var wire 32 3 c_datolec1 [31:0] $end
$var wire 32 4 c_dataout [31:0] $end
$var wire 1 5 c_branch $end
$var wire 1 6 c_alusrc $end
$var wire 3 7 c_alop [2:0] $end
$scope module ins $end
$var wire 1 ! clk $end
$var wire 32 8 inin [31:0] $end
$var reg 32 9 inou [31:0] $end
$upscope $end
$scope module ins0 $end
$var wire 32 : E [31:0] $end
$var wire 32 ; Sum [31:0] $end
$upscope $end
$scope module ins01 $end
$var wire 32 < adr [31:0] $end
$var reg 32 = instruccion [31:0] $end
$upscope $end
$scope module ins1 $end
$var wire 5 > dirlec1 [4:0] $end
$var wire 5 ? dirlec2 [4:0] $end
$var wire 1 1 enesc $end
$var wire 5 @ diresc [4:0] $end
$var wire 32 A datoesc [31:0] $end
$var reg 32 B datolec1 [31:0] $end
$var reg 32 C datolec2 [31:0] $end
$upscope $end
$scope module ins2 $end
$var wire 32 D datain [31:0] $end
$var wire 1 - memwrites $end
$var wire 1 . memreads $end
$var wire 32 E dir [31:0] $end
$var reg 32 F dataout [31:0] $end
$upscope $end
$scope module ins3 $end
$var wire 32 G op1 [31:0] $end
$var wire 3 H sel [2:0] $end
$var wire 32 I op2 [31:0] $end
$var reg 32 J Result [31:0] $end
$var reg 1 # zflag $end
$upscope $end
$scope module ins4 $end
$var wire 6 K ins [5:0] $end
$var wire 3 L uc [2:0] $end
$var reg 3 M so [2:0] $end
$upscope $end
$scope module ins5 $end
$var wire 6 N op [5:0] $end
$var reg 3 O alop [2:0] $end
$var reg 1 6 alusrc $end
$var reg 1 5 branch $end
$var reg 1 . memread $end
$var reg 1 & memreg $end
$var reg 1 - memwrite $end
$var reg 1 ( regdst $end
$var reg 1 1 regwrite $end
$upscope $end
$scope module ins6 $end
$var wire 32 P o1 [31:0] $end
$var wire 32 Q o2 [31:0] $end
$var wire 1 & sell $end
$var reg 32 R sal [31:0] $end
$upscope $end
$scope module ins7 $end
$var wire 5 S o3 [4:0] $end
$var wire 5 T o4 [4:0] $end
$var wire 1 ( selec $end
$var reg 5 U sal2 [4:0] $end
$upscope $end
$scope module ins8 $end
$var wire 32 V pc_adder [31:0] $end
$var wire 1 " sel $end
$var wire 32 W shift_adder [31:0] $end
$var reg 32 X pc_out [31:0] $end
$upscope $end
$scope module ins9 $end
$var wire 32 Y o5 [31:0] $end
$var wire 1 6 select3 $end
$var reg 32 Z sal3 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
